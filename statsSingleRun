#!/bin/bash

# Required parameters
testName=$1
logFile=$2
statsFile=$3

# Results variables
totalWrite=0
totalRmdir=0
totalForget=0
maxFTCthreshold=0
maxSMthreshold=0
maxSEthreshold=0
maxFDthreshold=0
maxSKthreshold=0
write_at_risk=0
write_aot_risk=0
write_it_risk=0
write_total_risk=0
forget_at_risk=0
forget_aot_risk=0
forget_it_risk=0
forget_total_risk=0
rmdir_at_risk=0
rmdir_aot_risk=0
rmdir_it_risk=0
rmdir_total_risk=0

writeHeaderRegex="\[.*\]\[GATEWAY - WRITE ACTION CAPTURED\]"
forgetHeaderRegex="\[.*\]\[GATEWAY - FORGET ACTION CAPTURED\]"
rmdirHeaderRegex="\[.*\]\[GATEWAY - RMDIR ACTION CAPTURED\]"
fileTypeChangesRegex="\[.*\]\[File Type Changes\]\[New threshold: ([0-9^]+)\]"
similarityRegex="\[.*\]\[Similarity Measurement\]\[New threshold: ([0-9^]+)\]"
shannonRegex="\[.*\]\[Shannon Enthropy\]\[New threshold: ([0-9^]+)\]"
fileDeletionRegex="\[.*\]\[Files Deletion\]\[New threshold: ([0-9^]+)\]"
suspiciousRegex="\[.*\]\[Suspicious Keywords\]\[New threshold: ([0-9^]+)\]"
accumulatedRegex="\[.*\]\[Checking action with: AccumulatedThreshold\]\[Condition result: (Safe|Risk)\]"
anyOverRegex="\[.*\]\[Checking action with: AnyOverThreshold\]\[Condition result: (Safe|Risk)\]"
individualRegex="\[.*\]\[Checking action with: IndividualThresholds\]\[Condition result: (Safe|Risk)\]"
resolutionRegex="\[.*\]\[Action resolution: (Safe|Risk)\]"

function Promote_totalWrite
{
    totalWrite=$((totalWrite+1))
}

function Promote_totalRmdir
{
    totalRmdir=$((totalRmdir+1))
}

function Promote_totalForget
{
    totalForget=$((totalForget+1))
}

function Promote_write_at_risk
{
    write_at_risk=$((write_at_risk+1))
}

function Promote_write_aot_risk
{
    write_aot_risk=$((write_aot_risk+1))
}

function Promote_write_it_risk
{
    write_it_risk=$((write_it_risk+1))
}

function Promote_write_total_risk
{
    write_total_risk=$((write_total_risk+1))
}

function Promote_forget_at_risk
{
    forget_at_risk=$((forget_at_risk+1))
}

function Promote_forget_aot_risk
{
    forget_aot_risk=$((forget_aot_risk+1))
}

function Promote_forget_it_risk
{
    forget_it_risk=$((forget_it_risk+1))
}

function Promote_forget_total_risk
{
    forget_total_risk=$((forget_total_risk+1))
}

function Promote_rmdir_at_risk
{
    rmdir_at_risk=$((rmdir_at_risk+1))
}

function Promote_rmdir_aot_risk
{
    rmdir_aot_risk=$((rmdir_aot_risk+1))
}

function Promote_rmdir_it_risk
{
    rmdir_it_risk=$((rmdir_it_risk+1))
}

function Promote_rmdir_total_risk
{
    rmdir_total_risk=$((rmdir_total_risk+1))
}

function SetIfGreater_maxFTCthreshold
{
    newVal=$1
    if [ "$newVal" -gt "$maxFTCthreshold" ]; then
        maxFTCthreshold=$newVal
    fi
}

function SetIfGreater_maxSMthreshold
{
    newVal=$1
    if [ "$newVal" -gt "$maxSMthreshold" ]; then
        maxSMthreshold=$newVal
    fi
}

function SetIfGreater_maxSEthreshold
{
    newVal=$1
    if [ "$newVal" -gt "$maxSEthreshold" ]; then
        maxSEthreshold=$newVal
    fi
}

function SetIfGreater_maxFDthreshold
{
    newVal=$1
    if [ "$newVal" -gt "$maxFDthreshold" ]; then
        maxFDthreshold=$newVal
    fi
}

function SetIfGreater_maxSKthreshold
{
    newVal=$1
    if [ "$newVal" -gt "$maxSKthreshold" ]; then
        maxSKthreshold=$newVal
    fi
}

function PromoteByContext_at
{
    ctx=$1
    if [ "$ctx" = "1" ]; then
        write_at_risk=$((write_at_risk+1))

    elif [ "$ctx" = "2" ]; then
        forget_at_risk=$((forget_at_risk+1))

    elif [ "$ctx" = "3" ]; then
        rmdir_at_risk=$((rmdir_at_risk+1))

    fi
}

function PromoteByContext_aot
{
    ctx=$1
    if [ "$ctx" = "1" ]; then
        write_aot_risk=$((write_aot_risk+1))

    elif [ "$ctx" = "2" ]; then
        forget_aot_risk=$((forget_aot_risk+1))

    elif [ "$ctx" = "3" ]; then
        rmdir_aot_risk=$((rmdir_aot_risk+1))

    fi
}

function PromoteByContext_it
{
    ctx=$1
    if [ "$ctx" = "1" ]; then
        write_it_risk=$((write_it_risk+1))

    elif [ "$ctx" = "2" ]; then
        forget_it_risk=$((forget_it_risk+1))

    elif [ "$ctx" = "3" ]; then
        rmdir_it_risk=$((rmdir_it_risk+1))

    fi
}

function PromoteByContext_total
{
    ctx=$1
    if [ "$ctx" = "1" ]; then
        write_total_risk=$((write_total_risk+1))

    elif [ "$ctx" = "2" ]; then
        forget_total_risk=$((forget_total_risk+1))

    elif [ "$ctx" = "3" ]; then
        rmdir_total_risk=$((rmdir_total_risk+1))

    fi
}

# 0 = not set | 1 = WRITE | 2 = FORGET | 3 = RMDIR
context=0

# Results calculation
while IFS= read -r logLine
do
    if [[ $logLine =~ $writeHeaderRegex ]]; then
        context=1
        Promote_totalWrite

    elif [[ $logLine =~ $forgetHeaderRegex ]]; then
        context=2
        Promote_totalForget

    elif [[ $logLine =~ $rmdirHeaderRegex ]]; then
        context=3
        Promote_totalRmdir

    elif [[ $logLine =~ $fileTypeChangesRegex ]]; then
        newTh=${BASH_REMATCH[1]}
        SetIfGreater_maxFTCthreshold $newTh

    elif [[ $logLine =~ $similarityRegex ]]; then
        newTh=${BASH_REMATCH[1]}
        SetIfGreater_maxSMthreshold $newTh

    elif [[ $logLine =~ $shannonRegex ]]; then
        newTh=${BASH_REMATCH[1]}
        SetIfGreater_maxSEthreshold $newTh

    elif [[ $logLine =~ $fileDeletionRegex ]]; then
        newTh=${BASH_REMATCH[1]}
        SetIfGreater_maxFDthreshold $newTh

    elif [[ $logLine =~ $suspiciousRegex ]]; then
        newTh=${BASH_REMATCH[1]}
        SetIfGreater_maxSKthreshold $newTh

    elif [[ $logLine =~ $accumulatedRegex ]]; then
        riskStatus=${BASH_REMATCH[1]}
        if [ "$riskStatus" = "Risk" ]; then
            PromoteByContext_at $context
        fi

    elif [[ $logLine =~ $anyOverRegex ]]; then
        riskStatus=${BASH_REMATCH[1]}
        if [ "$riskStatus" = "Risk" ]; then
            PromoteByContext_aot $context
        fi

    elif [[ $logLine =~ $individualRegex ]]; then
        riskStatus=${BASH_REMATCH[1]}
        if [ "$riskStatus" = "Risk" ]; then
            PromoteByContext_it $context
        fi

    elif [[ $logLine =~ $resolutionRegex ]]; then
        riskStatus=${BASH_REMATCH[1]}
        if [ "$riskStatus" = "Risk" ]; then
            PromoteByContext_total $context
        fi

    fi
done < "$logFile"

# Results template
resultTemplate="Run statistics for test: $testName\nTotal WRITE actions captured: $totalWrite\nTotal RMDIR actions captured: $totalRmdir\nTotal FORGET actions captured: $totalForget\n\nHeuristics:\nMax 'File Type Changes' threshold: $maxFTCthreshold\nMax 'Similarity Measurement' threshold: $maxSMthreshold\nMax 'Shannon Enthropy' threshold: $maxSEthreshold\nMax 'Files Deletion' threshold: $maxFDthreshold\nMax 'Suspicious Keywords' threshold: $maxSKthreshold\n\nResulutions:\nWrite:\nTotal 'AccumulatedThreshold' checks resolved as a risk: $write_at_risk\nTotal 'AnyOverThreshold' checks resolved as a risk: $write_aot_risk\nTotal 'IndividualThresholds' checks resolved as a risk: $write_it_risk\nTotal actions resolved as a risk: $write_total_risk\nForget:\nTotal 'AccumulatedThreshold' checks resolved as a risk: $forget_at_risk\nTotal 'AnyOverThreshold' checks resolved as a risk: $forget_aot_risk\nTotal 'IndividualThresholds' checks resolved as a risk: $forget_it_risk\nTotal actions resolved as a risk: $forget_total_risk\nRmdir:\nTotal 'AccumulatedThreshold' checks resolved as a risk: $rmdir_at_risk\nTotal 'AnyOverThreshold' checks resolved as a risk: $rmdir_aot_risk\nTotal 'IndividualThresholds' checks resolved as a risk: $rmdir_it_risk\nTotal actions resolved as a risk: $rmdir_total_risk\n"
touch $statsFile
chmod 777 $statsFile
echo -en $resultTemplate > $statsFile
